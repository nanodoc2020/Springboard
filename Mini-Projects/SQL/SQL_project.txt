/* Welcome to the SQL mini project. For this project, you will use
Springboard' online SQL platform, which you can log into through the
following link:

https://sql.springboard.com/
Username: student
Password: learn_sql@springboard

The data you need is in the "country_club" database. This database
contains 3 tables:
    i) the "Bookings" table,
    ii) the "Facilities" table, and
    iii) the "Members" table.

Note that, if you need to, you can also download these tables locally.

In the mini project, you'll be asked a series of questions. You can
solve them using the platform, but for the final deliverable,
paste the code for each solution into this script, and upload it
to your GitHub.

Before starting with the questions, feel free to take your time,
exploring the data, and getting acquainted with the 3 tables. */



/* Q1: Some of the facilities charge a fee to members, but some do not.
Please list the names of the facilities that do. */

SELECT CASE WHEN membercost > 0 THEN name ELSE '' END AS facilities_that_charge
FROM Facilities

facilities_that_charge
Tennis Court 1
Tennis Court 2
Massage Room 1
Massage Room 2
Squash Court

/* Q2: How many facilities do not charge a fee to members? */

SELECT COUNT(
CASE WHEN membercost =0
THEN 1
ELSE NULL
END ) AS facilities_no_charge
FROM Facilities

facilities_no_charge
4

/* Q3: How can you produce a list of facilities that charge a fee to members,
where the fee is less than 20% of the facility's monthly maintenance cost?
Return the facid, facility name, member cost, and monthly maintenance of the
facilities in question. */

SELECT facid, name, membercost, monthlymaintenance
FROM Facilities
WHERE membercost < .2 * monthlymaintenance
GROUP BY 1
LIMIT 0 , 30

facid	name	membercost	monthlymaintenance	
0	Tennis Court 1	5.0	200
1	Tennis Court 2	5.0	200
2	Badminton Court	0.0	50
3	Table Tennis	0.0	10
4	Massage Room 1	9.9	3000
5	Massage Room 2	9.9	3000
6	Squash Court	3.5	80
7	Snooker Table	0.0	15
8	Pool Table	0.0	15


/* Q4: How can you retrieve the details of facilities with ID 1 and 5?
Write the query without using the OR operator. */

SELECT *
FROM Facilities
WHERE facid
IN ( 1, 5 )
LIMIT 0 , 30

facid	name	membercost	guestcost	initialoutlay	monthlymaintenance	
5	Massage Room 2	9.9	80.0	4000	3000
1	Tennis Court 2	5.0	25.0	8000	200

/* Q5: How can you produce a list of facilities, with each labelled as
'cheap' or 'expensive', depending on if their monthly maintenance cost is
more than $100? Return the name and monthly maintenance of the facilities
in question. */

SELECT name, monthlymaintenance,
CASE WHEN monthlymaintenance <100
THEN 'cheap'
ELSE 'expensive'
END AS cost_est
FROM Facilities
ORDER BY monthlymaintenance
LIMIT 0 , 30


name	monthlymaintenance	cost_est	
Table Tennis	10	cheap
Snooker Table	15	cheap
Pool Table	15	cheap
Badminton Court	50	cheap
Squash Court	80	cheap
Tennis Court 1	200	expensive
Tennis Court 2	200	expensive
Massage Room 1	3000	expensive
Massage Room 2	3000	expensive


/* Q6: You'd like to get the first and last name of the last member(s)
who signed up. Do not use the LIMIT clause for your solution. */

SELECT firstname, surname, joindate
FROM Members
WHERE joindate = (
SELECT MAX( joindate )
FROM Members )

firstname	surname	joindate	
Darren	Smith	2012-09-26 18:08:45


/* Q7: How can you produce a list of all members who have used a tennis court?
Include in your output the name of the court, and the name of the member
formatted as a single column. Ensure no duplicate data, and order by
the member name. */

SELECT DISTINCT firstname, surname, Facilities.name
FROM Members
INNER JOIN Bookings ON Members.memid = Bookings.memid
INNER JOIN Facilities ON Bookings.facid = Facilities.facid
WHERE Bookings.facid
IN ( 0, 1 )
ORDER BY firstname, surname
LIMIT 0 , 30

firstname	surname	name	
Anne	Baker	Tennis Court 2
Anne	Baker	Tennis Court 1
Burton	Tracy	Tennis Court 1
Burton	Tracy	Tennis Court 2


/* Q8: How can you produce a list of bookings on the day of 2012-09-14 which
will cost the member (or guest) more than $30? Remember that guests have
different costs to members (the listed costs are per half-hour 'slot'), and
the guest user's ID is always 0. Include in your output the name of the
facility, the name of the member formatted as a single column, and the cost.
Order by descending cost, and do not use any subqueries. */

SELECT firstname, surname, Facilities.name,
CASE
WHEN Members.memid =0
THEN Bookings.slots * Facilities.guestcost
ELSE Bookings.slots * Facilities.membercost
END AS cost
FROM Members
INNER JOIN Bookings ON Members.memid = Bookings.memid
INNER JOIN Facilities ON Bookings.facid = Facilities.facid
WHERE Bookings.starttime >= '2012-09-14'
AND Bookings.starttime < '2012-09-15'
AND (
(
Members.memid =0
AND Bookings.slots * Facilities.guestcost >=30
)
OR (
Members.memid !=0
AND Bookings.slots * Facilities.membercost >=30
)
)
ORDER BY cost DESC
LIMIT 0 , 30

firstname	surname	name	cost	
GUEST	GUEST	Massage Room 2	320.0
GUEST	GUEST	Massage Room 1	160.0
GUEST	GUEST	Massage Room 1	160.0
GUEST	GUEST	Massage Room 1	160.0
GUEST	GUEST	Tennis Court 2	150.0
GUEST	GUEST	Tennis Court 1	75.0
GUEST	GUEST	Tennis Court 2	75.0
GUEST	GUEST	Tennis Court 1	75.0


/* Q9: This time, produce the same result as in Q8, but using a subquery. */

I don't understand how to do this. This is way too complicated for the level of understanding 
I have achieved in SQL. Help with directions, simpler exercises that build up to this level, 
or mark it wrong. 






/* Q10: Produce a list of facilities with a total revenue less than 1000.
The output of facility name and total revenue, sorted by revenue. Remember
that there's a different cost for guests and members! */
SELECT name, totalrevenue
FROM (

SELECT Facilities.name, SUM(
CASE WHEN memid =0
THEN slots * Facilities.guestcost
ELSE slots * membercost
END ) AS totalrevenue
FROM Bookings
INNER JOIN Facilities ON Bookings.facid = Facilities.facid
GROUP BY Facilities.name
) AS selected_facilities
WHERE totalrevenue <=1000
ORDER BY totalrevenue

name	totalrevenue	
Table Tennis	180.0
Snooker Table	240.0
Pool Table	270.0


FINAL COMMENTS: LET SQL DIE!